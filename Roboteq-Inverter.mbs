option explicit

dim commandScale as integer	' Scaling factor for command to duty mapping (0 to 1000)

dim throttleCmd as integer 	' Throttle command
dim brakeCmd as integer		' Brake command
dim command as integer		' Arbitrated command
dim motorSpeed as integer	' Measured motor speed
dim prevMotorSpeed as integer	' motor speed on previous loop


dim commandDuty as integer 	' Calculated duty to command from motor



dim maxAmps as integer 		' Max amps a single motor should be allowed.
dim battAmps1 as integer
dim battAmps2 as integer

dim brakeVal as integer


' input vars
dim accelCmd as integer 		' Command from accelerator

' calculated vars
dim neutralDuty as integer		' CAlculated neutral duty for current RPM. 0 current

' channel currents

' Hard limits
dim maxDuty as integer 		' Max duty cycle allowable
dim minDuty as integer 		' Min duty cycle allowable
dim startDrive as boolean	' Start drive bool recieved from CC

dim dutyCycleMaxBand as integer ' max duty cycle can jump from current neutral duty
dim dutyCycleMinBand as integer ' min duty cycle band, max regen value
dim dutyCycleDiff as integer 


commandScale = 100
maxDuty = 500
minDuty = 30
brakeVal = 0
dutyCycleMaxBand = 150
dutyCycleMinBand = 20


SetCommand(_B,1,0) ' set start drive to 0
SetCommand(_VAR,1,0)	' set throttle command to 0
SetCommand(_VAR, 2,0)	' set brake val to 0

' Max amps per motor. 400 for entire car
maxAmps = 70


top:

startDrive = getvalue(_B, 1) ' get start drive bool
'print("startDrive=",startDrive,"\r")

if (startDrive = 0)
 print("startDrive=0 \r")
 wait(10)
 goto top
end if

'print("get motor speed")
motorSpeed = getvalue(_BS, 2) 	' Measure current motor speed using Hall sensor
motorSpeed = abs(motorSpeed)	' ensure motor speed is positive
'print("Motor speed=",motorSpeed)
'print("get accel command")
throttleCmd = getvalue(_VAR, 1)	' Throttle command (user variable #1)

' clean motor speed bad values
' if motor speed diff is greater than 1000
if (abs(motorSpeed-prevMotorSpeed)>3000)
 ' use previous loop motor speed
 motorSpeed = prevMotorSpeed
end if

' set prev motor speed 
prevMotorSpeed = motorSpeed

print("motorSpeed=",motorSpeed,"\r")

neutralDuty = 2177*motorSpeed - 5303	' Calculate the duty cycle that would result in 0 amps at current
neutralDuty = neutralDuty/10000	' put back in correct value scale
print("neutralDuty=",neutralDuty,"\r")

' if the throttle cmd is less than neutral duty, coast
'if (throttleCmd < neutralDuty)
'commandDuty = neutralDuty
' print("Coasting=",commandDuty,"\r")
'end if


commandDuty = neutralDuty + (((dutyCycleMaxBand+dutyCycleMinBand)*throttleCmd)/1000)-dutyCycleMinBand
 
 
print("Accelerating: newCommandDuty=",commandDuty," accelAddition=",(((dutyCycleMaxBand+dutyCycleMinBand)*throttleCmd)/1000)-dutyCycleMinBand,"\r")




'print("Throttle command=",throttleCmd)

'brakeVal = getvalue(_VAR, 2)	' get braking value
'print(brakeVal)
' if braking, coast
'if (brakeVal > 20)
 'set command duty back to coast
 'throttleCmd = coastDutyCycle
'end if


' Limit command to 1000 max
if (commandDuty > 1000)
 commandDuty = 1000
end if

' Ensure duty cycle command is within tollerable allowances. Max and min
if (commandDuty < minDuty)
 commandDuty = 0
elseif (commandDuty > maxDuty)
 commandDuty = maxDuty
end if



'commandDuty = 140
print("final command=",commandDuty,"\r")

setcommand(_G, 1, commandDuty) ' Apply power to the motor
setcommand(_G, 2, commandDuty) ' Apply power to the motor

' Optional log printed on the console for monitoring or debug
'print("T=", throttleCmd, "\tB=", brakeCmd, "\tS=", motorSpeed, "\tND=", neutralDuty, "\tCD=", commandDuty,"\r")
'print("=====================================================================\r")
'print("loop end")
wait(1) ' Wait 10ms
goto top ' Repeat loop forever 
