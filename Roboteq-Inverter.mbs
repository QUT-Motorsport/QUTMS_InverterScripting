option explicit

dim maxRPM as integer		' RPM at 100% duty at specified voltage
'dim busVoltage as integer	' Maximum bus voltage
dim commandScale as integer	' Scaling factor for command to duty mapping (0 to 1000)

dim throttleCmd as integer 	' Throttle command
dim brakeCmd as integer		' Brake command
dim command as integer		' Arbitrated command
dim motorSpeed as integer	' Measured motor speed

dim neutralDuty as integer 	' Calculated neutral duty for current speed
dim commandDuty as integer 	' Calculated duty to command from motor

dim maxDuty as integer 		' Max duty cycle allowable
dim minDuty as integer 		' Min duty cycle allowable

' Parameters
maxRPM = 1750
'busVoltage = 50
commandScale = 100
maxDuty = 140
minDuty = 20

' Ensure the user variable is set to 0
setconfig(_VAR, 1, 0)


top:

motorSpeed = getvalue(_BS, 1) 	' Measure current motor speed using Hall sensor
throttleCmd = getvalue(_VAR, 1)	' Throttle command (user variable #1)
'brakeCmd = getvalue(_VAR, 2)	' Breake command (user variable #2)

print("Motor speed=", motorSpeed,  "\r") 	' print motor speed for debugging

' Arbitrate between throttle and brake commands
' Brake overrides throttle if greater than zero
' Only positive commands are valid
'if (brakeCmd > 0)
' command = -brakeCmd
'elseif (throttleCmd > 0)
' command = throttleCmd
'else
' command = 0
'end if

command = throttleCmd

' Limit command to 1000 max
if (command > 1000)
 command = 1000
end if

' Compute duty needed to maintain current speed
'neutralDuty = (motorSpeed * 1000) / maxRPM

' Calculate command duty
'commandDuty = neutralDuty + ((command * commandScale) / 1000)

commandDuty = command

' Ensure duty cycle command is within tollerable allowances. Max and min
if (commandDuty < minDuty)
 commandDuty = 0
elseif (commandDuty > maxDuty)
 commandDuty = maxDuty
end if

setcommand(_G, 1, commandDuty) ' Apply power to the motor
setcommand(_G, 2, commandDuty) ' Apply power to the motor

' Optional log printed on the console for monitoring or debug
print("T=", throttleCmd, "\tB=", brakeCmd, "\tS=", motorSpeed, "\tND=", neutralDuty, "\tCD=", commandDuty,"\r")

wait(1) ' Wait 10ms
goto top ' Repeat loop forever 