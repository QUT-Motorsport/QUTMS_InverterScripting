option explicit

dim maxRPM as integer		' RPM at 100% duty at specified voltage
'dim busVoltage as integer	' Maximum bus voltage
dim commandScale as integer	' Scaling factor for command to duty mapping (0 to 1000)

dim throttleCmd as integer 	' Throttle command
dim brakeCmd as integer		' Brake command
dim command as integer		' Arbitrated command
dim motorSpeed as integer	' Measured motor speed

dim neutralDuty as integer 	' Calculated neutral duty for current speed
dim commandDuty as integer 	' Calculated duty to command from motor

dim maxDuty as integer 		' Max duty cycle allowable
dim minDuty as integer 		' Min duty cycle allowable

'dim maxAmpsPerMotor as integer 		' Max amps a single motor should be allowed.

'dim lastDutyCycle as integer 	' the duty cycle of the previous loop

dim batteryAmps1 as integer
dim batteryAmps2 as integer

dim motorAmps1 as integer
dim motorAmps2 as integer

' Parameters
maxRPM = 1750
'busVoltage = 50
commandScale = 100
maxDuty = 140
minDuty = 20

' Max amps per motor. 400 for entire car
'maxAmpsPerChannel = 100

' Last duty cycle
'lastDutyCycle = 0


top:

motorSpeed = getvalue(_BS, 1) 	' Measure current motor speed using Hall sensor
throttleCmd = getvalue(_VAR, 1)	' Throttle command (user variable #1)
brakeCmd = getvalue(_VAR, 2)	' Brake command (user variable #2)
steeringCmd = getvalue(_VAR, 3) ' Steering command (user variable #3)

'print("Motor speed=", motorSpeed,  "\r") 	' print motor speed for debugging

' get value of battery aps

batteryAmps1 = getvalue(_BA, 1)
batteryAmps2 = getvalue(_BA, 2)
motorAmps1 = getvalue(_A, 1)
motorAmps2 = getvalue(_A,2)

print("BattAmps1=", batteryAmps1, "\tBattAmps2=", batteryAmps2, "\r")
print("MotorAmps1=", motorAmps1, "\tMotorAmps2=", motorAmps2, "\r")

' Torque Vectoring
' Steering command is positive steering angle for
' correct side of motor mount
throttleCmd = throttleCmd - (steeringCmd * 2)

' Limit command to 1000 max
if (throttleCmd > 1000)
 throttleCmd = 1000
end if

' If Braking Limit Throttle
if (brakeCmd > 50 Or throttleCmd < 0)
 throttleCmd = 0
end if

commandDuty = throttleCmd

' Ensure duty cycle command is within tollerable allowances. Max and min
if (commandDuty < minDuty)
 commandDuty = 0
elseif (commandDuty > maxDuty)
 commandDuty = maxDuty
end if

setcommand(_G, 1, commandDuty) ' Apply power to the motor
setcommand(_G, 2, commandDuty) ' Apply power to the motor

' Optional log printed on the console for monitoring or debug
print("T=", throttleCmd, "\tB=", brakeCmd, "\tS=", motorSpeed, "\tND=", neutralDuty, "\tCD=", commandDuty,"\r")

wait(1) ' Wait 10ms
goto top ' Repeat loop forever 
