option explicit

dim maxRPM as integer		' RPM at 100% duty at specified voltage
'dim busVoltage as integer	' Maximum bus voltage
dim commandScale as integer	' Scaling factor for command to duty mapping (0 to 1000)

dim throttleCmd as integer 	' Throttle command
dim brakeCmd as integer		' Brake command
dim command as integer		' Arbitrated command
dim motorSpeed as integer	' Measured motor speed

dim neutralDuty as integer 	' Calculated neutral duty for current speed
dim commandDuty as integer 	' Calculated duty to command from motor

dim maxDuty as integer 		' Max duty cycle allowable
dim minDuty as integer 		' Min duty cycle allowable

dim maxAmps as integer 		' Max amps a single motor should be allowed.
dim battAmps1 as integer
dim battAmps2 as integer

dim coastDutyCycle as integer

dim startDrive as boolean

dim brakeVal as integer

' Parameters
maxRPM = 1750
'busVoltage = 50
commandScale = 100
maxDuty = 280
minDuty = 30
brakeVal = 0

SetCommand(_B,1,0) ' set start drive to 0
SetCommand(_VAR,1,0)	' set throttle command to 0
SetCommand(_VAR, 2,0)	' set brake val to 0

' Max amps per motor. 400 for entire car
maxAmps = 50


top:

startDrive = getvalue(_B, 1) ' get start drive bool
'print("startDrive=",startDrive,"\r")

if (startDrive = 0)
 print("Don't start driving yet")
 wait(1)
 goto top
end if


motorSpeed = getvalue(_BS, 1) 	' Measure current motor speed using Hall sensor
throttleCmd = getvalue(_VAR, 1)	' Throttle command (user variable #1)
'print("throttleVal=",throttleCmd,"\r")


' current limit testing

battAmps1 = getvalue(_BATAMPS,1)
battAmps2 = getvalue(_BATAMPS,2)

if (battAmps1 > maxAmps*10 Or battAmps2 > maxAmps*10)
 print("ESTOP overcurrent limit=",maxAmps," BattAmps1=",battAmps1," BattAmps2=",battAmps2,"\r")
 setcommand(_ESTOP,1)
end if





'brakeCmd = getvalue(_VAR, 2)	' Breake command (user variable #2)

'print("Motor speed=", motorSpeed,  "\r") 	' print motor speed for debugging


coastDutyCycle = 2177*motorSpeed - 5303	' Calculate the duty cycle that would result in 0 amps at current
coastDutyCycle = coastDutyCycle/10000	' put back in correct value scale
'print("CoastDutyCalculated=",coastDutyCycle,"\r")

if (throttleCmd < coastDutyCycle)
 throttleCmd = coastDutyCycle
end if

brakeVal = getvalue(_VAR, 2)	' get braking value
' if braking, coast
if (brakeVal > 20)
 'set command duty back to coast
 throttleCmd = coastDutyCycle
end if



' Limit command to 1000 max
if (throttleCmd > 1000)
 throttleCmd = 1000
end if

commandDuty = throttleCmd

' Ensure duty cycle command is within tollerable allowances. Max and min
if (commandDuty < minDuty)
 commandDuty = 0
elseif (commandDuty > maxDuty)
 commandDuty = maxDuty
end if



'commandDuty = 140

setcommand(_G, 1, commandDuty) ' Apply power to the motor
setcommand(_G, 2, commandDuty) ' Apply power to the motor

' Optional log printed on the console for monitoring or debug
'print("T=", throttleCmd, "\tB=", brakeCmd, "\tS=", motorSpeed, "\tND=", neutralDuty, "\tCD=", commandDuty,"\r")
'print("=====================================================================\r")
wait(10) ' Wait 10ms
goto top ' Repeat loop forever 
