option explicit

' Variables
' ======================

dim debug as boolean
debug = false

' User input
dim throttleCmd as integer 	' Throttle command
dim brakeCmd as integer		' Brake command

' Sensed Values
dim motorSpeed_1 as integer	' Measured motor speed
dim motorSpeed_2 as integer	' Motor 2
dim prevMotorSpeed_1 as integer	' Measured motor speed prev loop
dim prevMotorSpeed_2 as integer	' Motor 2

' Calculated values
dim neutralDuty_1 as integer
dim neutralDuty_2 as integer

dim command_1 as integer		' Command to apply to neutral duty
dim command_2 as integer		' Motor 2

dim commandDuty_1 as integer    ' Final command to motors
dim commandDuty_2 as integer    ' Final command to motors

' Hard limits
dim maxDuty as integer 		' Max duty cycle allowable
dim minDuty as integer 		' Min duty cycle allowable
dim startDrive as boolean	' Start drive bool recieved from CC
dim minRegenRPM as integer	
dim maxAccel as integer
dim maxRegen as integer

' Banding values
dim dutyCycleMaxBand_1 as integer ' max duty cycle can jump from current neutral duty
dim dutyCycleMaxBand_2 as integer ' max duty cycle can jump from current neutral duty
dim dutyCycleMinBand_1 as integer ' min duty cycle band, max regen value
dim dutyCycleMinBand_2 as integer ' min duty cycle band, max regen value

' Set variables
' ======================
maxDuty = 1000
minDuty = -100

maxAccel = 1000     ' Duty cycle accel band
maxRegen = 100       ' Duty cycle regen brake band
minRegenRPM = 100   ' Min RPM for regen to be active

prevMotorSpeed_1 = 0
prevMotorSpeed_2 = 0

SetCommand(_B,1,0)      ' set start drive to 0
SetCommand(_VAR,1,0)	' set throttle command to 0
SetCommand(_VAR, 2,0)	' set brake val to 0


' Start loop
' ==========
top:

' Start Drive
startDrive = getvalue(_B, 1) ' get start drive bool
'print("startDrive=",startDrive,"\r")

if (startDrive = 0)
 if (debug)
  print("startDrive=0 \r")
 end if
 wait(10)
 goto top
end if

' Get commands from user variables
motorSpeed_1 = getvalue(_BS, 1)     ' get motor speed 1
motorSpeed_2 = getvalue(_BS, 2)     ' get motor speed 2

throttleCmd = getvalue(_VAR, 1)	' Throttle command (user variable #1)

' Clean motor speed
motorSpeed_1 = abs(motorSpeed_1)	' ensure positive
motorSpeed_2 = abs(motorSpeed_2)    ' ensure positive 

if (abs(motorSpeed_1-prevMotorSpeed_1)>3000) ' if motor speed diff is greater than x
 ' use previous loop motor speed
 motorSpeed_1 = prevMotorSpeed_1
end if

if (abs(motorSpeed_2-prevMotorSpeed_2)>3000) ' if motor speed diff is greater than x
 ' use previous loop motor speed
 motorSpeed_2 = prevMotorSpeed_2
end if

if (debug)
 print("motorSpeed_1=",motorSpeed_1,"motorSpeed_2=",motorSpeed_2,"\r")
end if

' Calculate throttle value
commandDuty_1 = (((maxAccel + maxRegen)*throttleCmd)/1000)-maxRegen
commandDuty_2 = (((maxAccel + maxRegen)*throttleCmd)/1000)-maxRegen

' No regen if rpm less than min rpm
if (motorSpeed_1 < minRegenRPM And commandDuty_1 < 0)
 commandDuty_1 = 0
end if

if (motorSpeed_2 < minRegenRPM And commandDuty_2 < 0)
 commandDuty_2 = 0
end if

if (debug)
 print("calculatedCommandDuty_1=",commandDuty_1," calculatedCommandDuty_2=",commandDuty_2,"\r")
end if
 

' Hard safety limits 
' ==================
 
' Ensure duty cycle command is within tollerable allowances. Max andi min
if (commandDuty_1 < minDuty)
 commandDuty_1 = 0
elseif (commandDuty_1 > maxDuty)
 commandDuty_1 = maxDuty
end if

if (commandDuty_2 < minDuty)
 commandDuty_2 = 0
elseif (commandDuty_2 > maxDuty)
 commandDuty_2 = maxDuty
end if

' Limit command to 1000 max
if (commandDuty_1 > 1000)
 commandDuty_1 = 1000
end if

if (commandDuty_2 > 1000)
 commandDuty_2 = 1000
end if

if (debug)
 print("commandDutyFinal_1=",commandDuty_1,"commandDutyFinal_2=",commandDuty_2,"\r")
end if
setcommand(_G, 1, commandDuty_1) ' Apply power to the motor
setcommand(_G, 2, commandDuty_2) ' Apply power to the motor

wait(1)     ' wait 1ms
goto top 'repeat loop forever

